buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    group = 'com.fnklabs.mt5-client'
    version = "${version}"


    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        withJavadocJar()
        withSourcesJar()
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    ext {
        vers = [
                commonscodec: '1.16.0',
                commonsio   : '1.3.2',
                httpclient  : '5.2.1',
                guava       : '32.1.2-jre',
                jackson     : '2.15.0',
                jodatime    : '2.12.2',
                junit       : '5.10.0',
                intellij    : '24.0.1',
                lang3       : '3.13.0',
                logback     : '1.4.11',
                mockito     : '5.5.0',
                pool2       : '2.11.1',
                slf4j       : '2.0.9',
        ]
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:$vers.junit"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$vers.junit"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:$vers.junit"

        testImplementation "org.mockito:mockito-core:$vers.mockito"
        testImplementation "org.mockito:mockito-junit-jupiter:$vers.mockito"
        testImplementation "ch.qos.logback:logback-classic:$vers.logback"
    }


    test {
        useJUnit()
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    name = 'MT5 Client'
                    description = 'MT5 API client library'
                    url = 'https://github.com/fnklabs/mt5-client'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'a.alimov'
                            name = 'Alisher Alimov'
                            email = 'alisher.alimov@fnklabs.com'
                        }
                    }
                    scm {
                        connection = 'scm:git@github.com:fnklabs/mt5-client.git'
                        developerConnection = 'scm:git:ssh:git@github.com:fnklabs/mt5-client.git'
                        url = 'https://github.com/fnklabs/mt5-client'
                    }
                }
            }
        }
        repositories {
            maven {
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = "$sonatypeUsername"
                    password = "$sonatypePassword"
                }
            }
        }
    }

    signing {
        required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }


    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}
